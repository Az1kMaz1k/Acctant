import config
import logging
import yadisk

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import callback_query, document, message
from aiogram.types.reply_keyboard import KeyboardButton, ReplyKeyboardMarkup
from sqliter import Sqliter

# log level
logging.basicConfig(level=logging.INFO)

# bot init
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# connection database
db = Sqliter('db.db')

# yadisk connection
ya = yadisk.YaDisk(token = config.ya_TOKEN)

# bot starting
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """This handler will be called when user sends `/start` command"""
    if not (db.check_user(message.from_user.id)):
        db.new_user(message.from_user.id, message.from_user.full_name)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! "+ message.from_user.full_name +"üëã\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏c—Ç–µ–Ω—Ç ü§ñ\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n–ò–º—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏(–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏) üè≠\n–î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. üóÇ")
    else:
        result = db.get_user(message.from_user.id)
        if result[0][4] == "FALSE":
            await message.answer("C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º "+ message.from_user.full_name +"\n–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É üëã\n–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —á–∞—Ç üóÇ\n–Ø –ø–µ—Ä–µ–¥–∞–º –∏—Ö –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚úçÔ∏è")
        else:
            button_all_user = KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            kb1 = ReplyKeyboardMarkup(resize_keyboard=True).add(button_all_user)
            await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚úÖ\n–Ø –¥–æ–±–∞–≤–∏–ª–∞ –¥–ª—è –í–∞—Å –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ üòâ\n–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –í–∞–º —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è ü§ñ", reply_markup=kb1)


# catch company_name
@dp.message_handler()
async def catch_company(message: types.Message):
    """This handler will be called when user sends some text"""
    # IF no company name
    if not (db.check_company_name(message.from_user.id)):
        await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –≤—Å–µ –ª–∏—à—å –∞—Å—Å–∏—Å—Ç–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n–Ø –Ω–µ —É–º–µ—é –≤–≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ üòì")
    else:
        result = db.get_user(message.from_user.id)
        if result[0][4] == "FALSE":
            inline_btn_1 = InlineKeyboardButton('–î–∞', callback_data='button1')
            inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
            await message.reply("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫: " + message.text + "?", reply_markup=inline_kb1)
        else:
            result = db.get_all_user()
            users = []
            for user in result:
                users.append(user[2] + " - –∫–æ–º–ø–∞–Ω–∏—è:" + user[3])

            await message.answer(users)

# add company_name
@dp.callback_query_handler(text="button1")
async def process_callback_button1(call: types.CallbackQuery):
    """This handler will be called when user press button1"""
    company = call.message.text.replace("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫: ","")
    company = company.replace("?","")
    # IF Admin
    if company == config.admin_TOKEN:
        db.add_company(company,"TRUE",call.from_user.id)
        button_all_user = KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        kb1 = ReplyKeyboardMarkup(resize_keyboard=True).add(button_all_user)
        await call.message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚úÖ\n–Ø –¥–æ–±–∞–≤–∏–ª–∞ –¥–ª—è –í–∞—Å –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ üòâ\n–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –í–∞–º —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è ü§ñ", reply_markup=kb1)
    # IF user
    else:
        db.add_company(company,"FALSE",call.from_user.id)
        await call.message.answer("‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ –≥–æ—Ç–æ–≤–æ! ‚úÖ\n–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —á–∞—Ç üóÇ\n–Ø –ø–µ—Ä–µ–¥–∞–º –∏—Ö –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚úçÔ∏è")

# user send document(s)
@dp.message_handler(content_types=message.ContentType.DOCUMENT)
async def send_document(message: types.Message):
    """This handler will be called when user dowloand document (pdf)"""
    result = db.get_user(message.from_user.id)
    if result[0][4] == "FALSE":
        file_id = message.document.file_id
        file_name = message.document.file_name
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, file_name)
        result = db.get_user(message.from_user.id)
        if not (ya.exists("/–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞/" + result[0][1] + "_" + result[0][3])):
            ya.mkdir("/–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞/" + result[0][1] + "_" + result[0][3])
        if not (ya.exists("/–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞/" + result[0][1] + "_" + result[0][3] + "/" + file_name)):
            ya.upload(file_name,"/–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞/" + result[0][1] + "_" + result[0][3] + "/" + file_name)
            await message.answer("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚úÖ\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç,\n–Ø –≤—Å–µ–≥–¥–∞ –∫ –í–∞—à–∏–º —É—Å–ª—É–≥–∞–º! ü§ñ")
        else:
            await message.answer("–¢–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ‚ö†Ô∏è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞,\n–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É! ü§ñ")
    else:
        await message.answer("–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! ‚ö†Ô∏è\n–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã! ü§ñ")

# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)